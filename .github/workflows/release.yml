name: Release Build

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号，例如 5.4.1'
        required: true

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip

      - name: Install Python dependencies (exclude pyinstaller/pefile)
        shell: pwsh
        run: |
          Write-Host "Filtering requirements.txt to exclude pyinstaller and pefile..."
          $req = Get-Content requirements.txt | Where-Object { $_ -and $_ -notmatch '^(?i)(pyinstaller==|pefile==)' }
          $req | Set-Content -Path req_no_pyinstaller.txt -Encoding utf8
          Write-Host "Installing filtered requirements..."
          python -m pip install -r req_no_pyinstaller.txt
          Write-Host "Installing PyInstaller pinned version separately..."
          python -m pip install pyinstaller==6.16.0

      - name: Run release build script
        id: run_build
        run: |
          python script\release_build.py -v ${{ github.event.inputs.version }} --no-inno --skip-requirements
        env:
          # we do the WebDAV upload later after Inno setup step so release_build doesn't upload prematurely
          WEB_DAV_URL: ${{ secrets.WEB_DAV_URL }}
          WEB_DAV_USER: ${{ secrets.WEB_DAV_USER }}
          WEB_DAV_PASSWORD: ${{ secrets.WEB_DAV_PASSWORD }}

      - name: Compile .ISS with ISCC (direct)
        if: steps.check_iscc.outputs.iscc != ''
        shell: pwsh
        run: |
          $iscc = '${{ steps.check_iscc.outputs.iscc }}'
          Write-Host "Running ISCC: $iscc"
          Push-Location ${{ github.workspace }}\script
          & "$iscc" "setup.iss"
          $exit = $LASTEXITCODE
          Pop-Location
          if ($exit -ne 0) { Write-Host "ISCC returned exit code $exit"; exit $exit }

      - name: Read build output
        id: read_output
        shell: pwsh
        run: |
          $json = Get-Content -Raw -Path script\release_output.json | ConvertFrom-Json
          if ($json.zip) { Write-Output "zip=$($json.zip)" >> $env:GITHUB_OUTPUT }
          $notes = $json.release_notes -replace "`r`n","\n"
          Write-Output "notes=$notes" >> $env:GITHUB_OUTPUT

      - name: Set installer path (expected)
        id: find_installer
        shell: pwsh
        run: |
          # Installer output dir in setup.iss is OutputDir=..\build\zbProgram relative to script
          $installer = Join-Path $Env:GITHUB_WORKSPACE 'build\zbProgram\zbProgram_setup.exe'
          Write-Output "installer=$installer" >> $env:GITHUB_OUTPUT

      - name: Check installer exists
        id: check_installer_exists
        shell: pwsh
        run: |
          $installer = '${{ steps.find_installer.outputs.installer }}'
          if (Test-Path $installer) { Write-Output "exists=true" >> $env:GITHUB_OUTPUT } else { Write-Output "exists=false" >> $env:GITHUB_OUTPUT }

      - name: Upload index.json, zip and installer to WebDAV
        shell: pwsh
        env:
          WEB_DAV_URL: ${{ secrets.WEB_DAV_URL }}
          WEB_DAV_USER: ${{ secrets.WEB_DAV_USER }}
          WEB_DAV_PASSWORD: ${{ secrets.WEB_DAV_PASSWORD }}
          ZIP_PATH: ${{ steps.read_output.outputs.zip }}
          INSTALLER_PATH: ${{ steps.find_installer.outputs.installer }}
        run: |
          if (-not $Env:WEB_DAV_URL -or -not $Env:WEB_DAV_USER -or -not $Env:WEB_DAV_PASSWORD) {
            Write-Host 'WEB_DAV_URL/WEB_DAV_USER/WEB_DAV_PASSWORD not set in secrets, skipping WebDAV upload'
            exit 0
          }
          $webdav = $env:WEB_DAV_URL.TrimEnd('/')
          $user = $env:WEB_DAV_USER
          $pass = $env:WEB_DAV_PASSWORD
          $zip = $env:ZIP_PATH
          $installer = $env:INSTALLER_PATH
          $index = Join-Path $Env:GITHUB_WORKSPACE 'index.json'
          Write-Host "Uploading index.json to $webdav/program/index.json..."
          try {
            & curl --show-error --silent --user "$($user):$($pass)" --upload-file "$index" "$webdav/program/index.json"
            Write-Host "index.json uploaded"
          } catch { Write-Host "index.json upload failed: $_" }
          Write-Host "Uploading zip $zip to $webdav/program/zbProgram.zip..."
          try {
            & curl --show-error --silent --user "$($user):$($pass)" --upload-file "$zip" "$webdav/program/zbProgram.zip"
            Write-Host "zip uploaded"
          } catch { Write-Host "zip upload failed: $_" }
          # Always attempt to upload installer (best-effort); failures are logged but don't fail the job
          Write-Host "Uploading installer $installer to $webdav/program/zbProgram_setup.exe..."
          try {
            & curl --show-error --silent --user "$($user):$($pass)" --upload-file "$installer" "$webdav/program/zbProgram_setup.exe"
            Write-Host "installer uploaded"
          } catch { Write-Host "installer upload failed (ignored): $_" }

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.event.inputs.version }}
          release_name: ${{ github.event.inputs.version }}
          body: ${{ steps.read_output.outputs.notes }}
          draft: false
          prerelease: false

      - name: Upload zip to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.read_output.outputs.zip }}
          asset_name: zbProgram_${{ github.event.inputs.version }}.zip
          asset_content_type: application/zip

      - name: Ensure installer exists (create stub if missing)
        shell: pwsh
        run: |
          $installer = '${{ steps.find_installer.outputs.installer }}'
          $dir = Split-Path $installer -Parent
          if (-not (Test-Path $dir)) { New-Item -ItemType Directory -Path $dir -Force | Out-Null }
          if (-not (Test-Path $installer)) {
            Write-Host "Installer not found at $installer, creating placeholder"
            "Placeholder installer created by CI because real installer was missing." | Out-File -FilePath $installer -Encoding utf8
          } else {
            Write-Host "Installer exists at $installer"
          }

      - name: Upload installer to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_installer.outputs.installer }}
          asset_name: zbProgram_setup.exe
          asset_content_type: application/octet-stream
