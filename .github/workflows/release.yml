name: Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (留空则使用index.json中的版本号)'
        required: false
        default: ''

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          persist-credentials: true

      - name: 安装Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: 更新pip
        run: |
          python -m pip install --upgrade pip

      - name: 安装Python运行库
        shell: pwsh
        run: |
          Write-Host "Filtering requirements.txt to exclude pyinstaller and pefile..."
          $req = Get-Content requirements.txt | Where-Object { $_ -and $_ -notmatch '^(?i)(pyinstaller==|pefile==)' }
          $req | Set-Content -Path req_no_pyinstaller.txt -Encoding utf8
          Write-Host "Installing filtered requirements..."
          python -m pip install -r req_no_pyinstaller.txt
          Write-Host "Installing PyInstaller pinned version separately..."
          python -m pip install pyinstaller==6.16.0

      - name: 读取index.json版本
        id: get_index_version
        shell: pwsh
        run: |
          $index_json = Get-Content -Path "index.json" -Raw | ConvertFrom-Json
          Write-Output "index_version=$($index_json.version)" >> $env:GITHUB_OUTPUT
          Write-Output "index_version_code=$($index_json.version_code)" >> $env:GITHUB_OUTPUT

      - name: 编译程序
        id: run_build
        shell: pwsh
        run: |
          $version = "${{ github.event.inputs.version }}"
          if ([string]::IsNullOrEmpty($version)) {
            $index_version = "${{ steps.get_index_version.outputs.index_version }}"
            Write-Host "版本号未提供，使用index.json中的版本号: $index_version"
            python script\release_build.py -v $index_version
          } else {
            Write-Host "使用指定版本号: $version"
            python script\release_build.py -v $version
          }

      - name: 编译安装程序
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.7
        with:
          path: script/setup.iss
          options: /O+

      - name: 校验输出
        id: check_output
        shell: pwsh
        run: |
          $json = Get-Content -Raw -Path script\release_output.json | ConvertFrom-Json
          if ($json.zip) { Write-Output "zip=$($json.zip)" >> $env:GITHUB_OUTPUT }
          $notes = $json.release_notes -replace "`r`n","\n"
          Write-Output "notes=$notes" >> $env:GITHUB_OUTPUT
          $installer = Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Filter zbProgram_setup.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($installer) { Write-Output "installer=$($installer.FullName)" >> $env:GITHUB_OUTPUT } else { Write-Output "installer=" >> $env:GITHUB_OUTPUT }
          Write-Output "version_code=$($json.version_code)" >> $env:GITHUB_OUTPUT

      - name: 提交更改
        shell: pwsh
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -u
          if (-not (git diff --cached --quiet)) {
            $version = "${{ github.event.inputs.version }}"
            if ([string]::IsNullOrEmpty($version)) {
              $index_version = "${{ steps.get_index_version.outputs.index_version }}"
              git commit -m "Update version to $index_version and versionCode to ${{ steps.check_output.outputs.version_code }} [ci skip]"
            } else {
              git commit -m "Update version to ${{ github.event.inputs.version }} and versionCode to ${{ steps.check_output.outputs.version_code }} [ci skip]"
            }
            # Pull remote changes first to avoid conflicts
            git pull --rebase origin main
            git push origin main
          } else {
            Write-Host "No changes to commit"
          }

      - name: 发布Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.event.inputs.version }}
          tag_name: ${{ github.event.inputs.version }}
          files: |
            zbProgram_${{ github.event.inputs.version }}.zip
            ${{ steps.check_output.outputs.installer }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ steps.check_output.outputs.notes }}
          draft: false
          prerelease: false

      - name: 上传到WebDAV
        shell: pwsh
        env:
          WEB_DAV_URL: ${{ secrets.WEB_DAV_URL }}
          WEB_DAV_USER: ${{ secrets.WEB_DAV_USER }}
          WEB_DAV_PASSWORD: ${{ secrets.WEB_DAV_PASSWORD }}
          ZIP_PATH: ${{ steps.check_output.outputs.zip }}
          INSTALLER_PATH: ${{ steps.check_output.outputs.installer }}
        run: |
          if (-not $Env:WEB_DAV_URL -or -not $Env:WEB_DAV_USER -or -not $Env:WEB_DAV_PASSWORD) {
            Write-Host 'WEB_DAV_URL/WEB_DAV_USER/WEB_DAV_PASSWORD not set in secrets, skipping WebDAV upload'
            exit 0
          }
          $webdav = $env:WEB_DAV_URL.TrimEnd('/')
          $user = $env:WEB_DAV_USER
          $pass = $env:WEB_DAV_PASSWORD
          $zip = $env:ZIP_PATH
          $installer = $env:INSTALLER_PATH
          $index = Join-Path $Env:GITHUB_WORKSPACE 'index.json'
          Write-Host "Uploading index.json to $webdav/program/index.json..."
          curl --fail --show-error --silent --user "$($user):$($pass)" --upload-file "$index" "$webdav/program/index.json"
          Write-Host "Uploading zip $zip to $webdav/program/zbProgram.zip..."
          curl --fail --show-error --silent --user "$($user):$($pass)" --upload-file "$zip" "$webdav/program/zbProgram.zip"
          if ($installer -and $installer -ne '') {
            Write-Host "Uploading installer $installer to $webdav/program/zbProgram_setup.exe..."
            curl --fail --show-error --silent --user "$($user):$($pass)" --upload-file "$installer" "$webdav/program/zbProgram_setup.exe"
          } else {
            Write-Host "No installer found to upload"
          }